/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from ".";
import { Integers } from "./Integers";

export class IntegersFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: TransactionOverrides): Promise<Integers> {
    return super.deploy(overrides) as Promise<Integers>;
  }
  getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
    return super.getDeployTransaction(overrides);
  }
  attach(address: string): Integers {
    return super.attach(address) as Integers;
  }
  connect(signer: Signer): IntegersFactory {
    return super.connect(signer) as IntegersFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Integers {
    return new Contract(address, _abi, signerOrProvider) as Integers;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_value",
        type: "string"
      }
    ],
    name: "parseInt",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_base",
        type: "uint8"
      }
    ],
    name: "toByte",
    outputs: [
      {
        internalType: "bytes1",
        name: "_ret",
        type: "bytes1"
      }
    ],
    stateMutability: "pure",
    type: "function"
  }
];

const _bytecode =
  "0x61032a610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806342346c5e14610045578063a86b73f014610114575b600080fd5b6100fe6004803603602081101561005b57600080fd5b810190808035906020019064010000000081111561007857600080fd5b82018360208201111561008a57600080fd5b803590602001918460018302840111640100000000831117156100ac57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061017b565b6040518082815260200191505060405180910390f35b6101436004803603602081101561012a57600080fd5b81019080803560ff1690602001909291905050506102e1565b60405180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b60006060829050600080600080945060008451905080806001900391505060008094505b855185101561021e5760008686815181106101b657fe5b602001015160f81c60f81b60f81c60ff169050603081101580156101db575060398111155b156101fd5760308103600a890201975084806001019550508280600190039350505b602e81141561021057600191505061021e565b50848060010195505061019f565b80156102aa5760006001850190505b60128110156102a857600087828151811061024457fe5b602001015160f81c60f81b60f81c60ff16905060308110158015610269575060398111155b1561028b5760308103600a8a0201985084806001019550508380600190039450505b600084141561029a57506102a8565b50808060010191505061022d565b505b60128310156102d5576000836012039050600081600a0a9050808902985050505050505050506102dc565b5050505050505b919050565b600060015901828153805191505091905056fea26469706673582212201b3ef80d2758f8dc195a6993d05d4ef143cd1af35ddfd7f9af96a8ab9d01808764736f6c634300060c0033";
